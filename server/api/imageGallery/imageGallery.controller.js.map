{"version":3,"sources":["api/imageGallery/imageGallery.controller.js"],"names":["index","show","destroy","config","update","accessKeyId","process","env","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","region","s3","S3","params","Bucket","s3Url","exports","signing","req","res","request","body","fileName","filename","path","readType","expiration","add","toDate","s3Policy","conditions","bucket","acl","success_action_status","type","stringPolicy","base64Policy","Buffer","toString","signature","createHmac","digest","credentials","url","fields","key","AWSAccessKeyId","policy","jsonp","handleError","statusCode","err","status","send","listObjects","promise","then","images","data","Contents","map","push","image","Key","json","catch","console","log","paramsToDelete","id","deleteObject","result"],"mappings":"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","file":"imageGallery.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/imageGallery              ->  index\n * POST    /api/imageGallery              ->  create\n * GET     /api/imageGallery/:id          ->  show\n * DELETE  /api/imageGallery/:id          ->  destroy\n */\n\n'use strict';\nimport AWS from 'aws-sdk';\nimport crypto from 'crypto';\nimport moment from 'moment';\n\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: 'us-east-1'\n});\nvar s3 = new AWS.S3();\nvar params = {\n  Bucket: 'doebem'\n};\nvar s3Url = 'https://s3-sa-east-1.amazonaws.com/doebem';\n\nexports.signing = function(req, res) {\n  var request = req.body;\n  var fileName = request.filename;\n  var path = fileName;\n\n  var readType = 'public-read';\n\n  var expiration = moment().add(5, 'm')\n    .toDate(); //15 minutes\n\n  var s3Policy = {\n    expiration: expiration,\n    conditions: [{\n      bucket: 'doebem'\n    },\n      ['starts-with', '$key', path],\n      {\n        acl: readType\n      },\n      {\n        success_action_status: '201'\n      },\n      ['starts-with', '$Content-Type', request.type],\n      ['content-length-range', 2048, 10485760], //min and max\n      ]\n  };\n\n  var stringPolicy = JSON.stringify(s3Policy);\n  var base64Policy = new Buffer(stringPolicy, 'utf-8').toString('base64');\n\n  // sign policy\n  var signature = crypto.createHmac('sha1', process.env.AWS_SECRET_ACCESS_KEY)\n    .update(new Buffer(base64Policy, 'utf-8'))\n    .digest('base64');\n\n  var credentials = {\n    url: s3Url,\n    fields: {\n      key: path,\n      AWSAccessKeyId: process.env.AWS_ACCESS_KEY_ID,\n      acl: readType,\n      policy: base64Policy,\n      signature: signature,\n      'Content-Type': request.type,\n      success_action_status: 201\n    }\n  };\n  res.jsonp(credentials);\n};\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of images\nexport function index(req, res) {\n  return s3.listObjects(params).promise()\n    .then(data => {\n      let images = [];\n      data.Contents.map(image => {\n        images.push(image.Key);\n      });\n      return res.status(200).json(images);\n    })\n    .catch(err => {\n      console.log(err);\n      return handleError(res);\n    });\n}\n\n// Gets a single Posts from the DB\nexport function show(req, res) {\n  /*return Posts.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));*/\n}\n\n// Deletes a image from the s3\nexport function destroy(req, res) {\n  let paramsToDelete = {\n    Bucket: 'doebem',\n    Key: req.params.id\n  };\n  s3.deleteObject(paramsToDelete).promise()\n    .then(result => {\n      console.log(result);\n      return res.status(200);\n    })\n    .catch(err => {\n      console.log(err);\n      return handleError(res);\n    });\n}\n"]}